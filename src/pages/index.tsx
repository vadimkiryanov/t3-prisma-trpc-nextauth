import { signIn, signOut, useSession } from "next-auth/react";
import Head from "next/head";
import Link from "next/link";
import { useState } from "react";
import Footer from "~/components/Footer";
import Header from "~/components/Header";
import { NoteCard } from "~/components/NoteCard";
import { NoteEditor } from "~/components/NoteEditor";
import Welcome from "~/components/Welcome";
import { api, type RouterOutputs } from "~/utils/api";

export default function Home() {
  const hello = api.example.hello.useQuery({
    text: "World",
  });
  const { data: sessionData } = useSession();

  return (
    <>
      <Head>
        <title>Notetaker</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {sessionData && <Header />}
      <main className={`flex  h-full flex-col items-center justify-center`}>
        <AuthShowcase />
      </main>
      <Footer />
    </>
  );
}

// Проверка авторизации
function AuthShowcase() {
  const { data: sessionData } = useSession();

  const { data: secretMessage } = api.example.getSecretMessage.useQuery(
    undefined, // no input
    { enabled: sessionData?.user !== undefined }
  );

  return (
    <>
      {!sessionData && <Welcome />}
      {sessionData && <Content />}
      <div className="flex flex-col items-center justify-center gap-4">
        <p className="text-center text-2xl text-white">
          {/*   {sessionData && <span>Logged in as {sessionData.user?.name}</span>}
          {secretMessage && <span> - {secretMessage}</span>} */}
        </p>
        {!sessionData && (
          <button
            className=" btn mt-6 rounded-2xl bg-purple-500 text-white hover:bg-purple-700"
            onClick={sessionData ? () => void signOut() : () => void signIn()}
          >
            {sessionData ? "Sign out" : "Sign in"}
          </button>
        )}
      </div>
    </>
  );
}

// Контент Топиков
type Topic = RouterOutputs["topic"]["getAll"][0];

const Content: React.FC = () => {
  const { data: sessionData } = useSession();

  const [selectedTopic, setSelectedTopic] = useState<Topic | null>(null);

  // Получение всех топиков
  const { data: topics, refetch: refetchTopics } = api.topic.getAll.useQuery(
    undefined,
    {
      enabled: sessionData?.user !== undefined,
      onSuccess: (data) => {
        setSelectedTopic(selectedTopic ?? data[0] ?? null);
      },
    }
  );

  // Создание топика
  const createTopic = api.topic.create.useMutation({
    // Обновление состояния топиков, когда отправка топика прошла успешно
    onSuccess: () => {
      void refetchTopics();
    },
  });

  // Удаление топика
  const onDeleteTopic = api.topic.delete.useMutation({
    onSuccess: () => {
      void refetchTopics();
    },
  });

  const {
    data: notes,
    refetch: refetchNotes,
    isFetching: isFetchingNotes,
  } = api.note.getAll.useQuery(
    {
      topicId: selectedTopic?.id ?? "",
    },
    {
      enabled: sessionData?.user !== undefined && selectedTopic !== null,
    }
  );

  const createNote = api.note.create.useMutation({
    onSuccess: () => {
      void refetchNotes();
    },
  });
  const deleteNote = api.note.delete.useMutation({
    onSuccess: () => {
      void refetchNotes();
    },
  });

  const [topicID, setTopicID] = useState("");
  const deleteNoteMany = api.note.deleteMany.useMutation({
    onSuccess: () => {
      void refetchNotes();
      void onDeleteTopic.mutate({
        id: topicID,
      });
      setTopicID('')
    },
  });

  const deleteTopicWithNotes = (topicId: string) => {
    setTopicID(topicId);

    void deleteNoteMany.mutate({
      topicId: topicId,
    });
  };

  return (
    <div className="mx-5 mt-5 grid grid-cols-4 gap-2">
      <div className="px-2">
        <ul className="menu rounded-box w-56 bg-base-100 p-2">
          {topics?.map((topic) => (
            <li
              className="mb-2 flex flex-row justify-between gap-3"
              key={topic.id}
            >
              <a
                className=" flex-1"
                href="#"
                onClick={(evt) => {
                  evt.preventDefault();
                  setSelectedTopic(topic);
                }}
              >
                {topic.title}
              </a>
              <button
                className="btn-circle btn w-3"
                onClick={() => void deleteTopicWithNotes(topic.id)}
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  className="h-6 w-6"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M6 18L18 6M6 6l12 12"
                  />
                </svg>
              </button>
            </li>
          ))}
        </ul>

        <div className="divider"></div>
        <input
          type="text"
          placeholder="New Topic"
          className="input-bordered input input-sm w-full"
          onKeyDown={(e) => {
            // Создание топика
            if (e.key === "Enter") {
              createTopic.mutate({
                title: e.currentTarget.value,
              });
              e.currentTarget.value = "";
            }
          }}
        />
      </div>
      <div className="col-span-3">
        <div className="card max-h-[400px] overflow-auto   px-4">
          {notes?.map((note) => {
            return (
              <div key={note.id} className="mt-5">
                <NoteCard
                  note={note}
                  onDelete={() => void deleteNote.mutate({ id: note.id })}
                />
              </div>
            );
          })}
        </div>

        <NoteEditor
          isFetching={isFetchingNotes}
          onSave={({ title, content }) => {
            void createNote.mutate({
              title,
              content,
              topicId: selectedTopic?.id ?? "",
            });
          }}
        />
      </div>
    </div>
  );
};
